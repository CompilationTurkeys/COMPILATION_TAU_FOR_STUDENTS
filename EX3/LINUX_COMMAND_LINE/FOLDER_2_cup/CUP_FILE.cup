/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import AST.*;

/*************/
/* TERMINALS */
/*************/
terminal IF;
terminal DOT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal DIVIDE;
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal SEMICOLON;
terminal ASSIGN;

terminal CLASS;
terminal COMMA;
terminal EQUAL;
terminal EXTENDS;
terminal GT;
terminal GTE;
terminal INTEGER;
terminal NEW;
terminal LT;
terminal LTE;
terminal NEQUAL;
terminal NULL;
terminal RETURN;
terminal STRING;
terminal VOID;
terminal WHILE;



/*************/
/* TERMINALS */
/*************/
terminal Integer INT;
terminal String ID;
terminal String STR;
terminal String	CLASS_ID;

non terminal AST_EXP exp;
non terminal AST_VAR var;
non terminal AST_STMT stmt;
non terminal AST_STMT_LIST stmtList;
non terminal AST_PROGRAM program;
non terminal AST_CLASSDECL_LIST classDeclLst;
non terminal AST_CLASSDECL classDecl;
non terminal AST_FIELD_METHOD_LIST fieldMethodList;
non terminal AST_TYPE type;
non terminal AST_CALL call;
non terminal AST_VCALL virtualCall;
non terminal AST_EXP_LIST expList;
non terminal AST_LITERAL literal;
non terminal AST_BINOP binop;
non terminal AST_FORMALS formals;
non terminal AST_COMMATYPEID_LIST commaTypeIDList;
non terminal AST_COMMATYPEID commaTypeID;
non terminal AST_FIELD field;
non terminal AST_IDLIST idList;
non terminal AST_METHOD method;


/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left DIVIDE;
precedence left LT;
precedence left LTE;
precedence left GT;
precedence left GTE;
precedence left EQUAL;
precedence left NEQUAL;

/************************/
/* START WITH: program */
/************************/
start with program;

/********************/
/* DERIVATION RULES */
/********************/

stmtList	::=		stmt:s								{: RESULT = new AST_STMT_LIST(s,null); :}
					| stmtList:l stmt:s					{: RESULT = new AST_STMT_LIST(s,l); :}
					;

var			::=		ID:name								{: RESULT = new AST_VAR_SIMPLE(name);       :}
					| var:v DOT ID:fieldName			{: RESULT = new AST_VAR_FIELD(v,fieldName); :} 
					| var:v LBRACK exp:e RBRACK			{: RESULT = new AST_VAR_SUBSCRIPT(v,e);     :} 	
					;
					
program		::=		classDeclLst:cdl					{: RESULT = new AST_PROGRAM_CLASS_DECL_LIST(cdl);  :}
					;


classDeclLst::=		classDecl:cd						{: RESULT = new AST_CLASSDECL_LIST(cd,null); :}
					| classDeclLst:l classDecl:cd		{: RESULT = new AST_CLASSDECL_LIST(cd,l); :}
					;
					
classDecl	::=		CLASS CLASS_ID:name LBRACE fieldMethodList:l RBRACE  {:  RESULT = new AST_CLASSDECL_SIMPLE_LIST(name,l); :}
					| CLASS CLASS_ID:name LBRACE RBRACE {: RESULT = new AST_CLASSDECL_SIMPLE(name); :}
					| CLASS CLASS_ID:name EXTENDS CLASS_ID:otherName LBRACE fieldMethodList:l RBRACE {: RESULT = new AST_CLASSDECL_EXTENDED_LIST(name,otherName,l); :}
					| CLASS CLASS_ID:name EXTENDS CLASS_ID:otherName LBRACE RBRACE {: RESULT = new AST_CLASSDECL_EXTENDED(name,otherName); :}
					;				

fieldMethodList ::=  field:f 	{: RESULT = new AST_FIELD_METHOD_LIST(f,null); :}
					| method:m 	{: RESULT = new AST_FIELD_METHOD_LIST(m,null); :}
					| fieldMethodList:l field:f {: RESULT = new AST_FIELD_METHOD_LIST(f,l); :}  
					| fieldMethodList:l method:m {: RESULT = new AST_FIELD_METHOD_LIST(m,l); :}
					;

stmt		::=		var:v ASSIGN exp:e SEMICOLON								{: RESULT = new AST_STMT_ASSIGN(v,e); :}
					| IF    LPAREN exp:cond RPAREN  stmt:s 						{: RESULT = new AST_STMT_IF(cond,s); :}
					| WHILE LPAREN exp:cond RPAREN  stmt:s 						{: RESULT = new AST_STMT_WHILE(cond,s); :}
					| call:cl SEMICOLON											{: RESULT = new AST_STMT_CALL(cl); :}
					| RETURN SEMICOLON											{: RESULT = new AST_STMT_RETURN(); :}
					| RETURN exp:e SEMICOLON									{: RESULT = new AST_STMT_RETURN_EXP(e); :}
					| LBRACE stmtList:body RBRACE								{: RESULT = new AST_STMT_MULTSTMTS(body); :}
					| LBRACE RBRACE												{: RESULT = new AST_STMT_MULTSTMTS_EMPTY(); :}
					| type:t ID:name SEMICOLON									{: RESULT = new AST_STMT_TYPE(t,name); :}
					| type:t ID:name ASSIGN exp:e SEMICOLON						{: RESULT = new AST_STMT_TYPE_EXP(t,name,e); :}
					;
					
type		::= 	INTEGER  {: RESULT = new AST_TYPE_INT(); :}
					| STRING  {: RESULT = new AST_TYPE_STRING(); :}
					| CLASS_ID:name {: RESULT = new AST_TYPE_CLASS(name); :}
					| type:t LBRACK RBRACK {: RESULT = new AST_TYPE_ARRAY(t); :}
					;

call		::= 	virtualCall:vc 	{:RESULT = new AST_CALL_VCALL(vc); :};

	
virtualCall ::= 	var:v DOT ID:name LPAREN expList:elst RPAREN      {: RESULT = new AST_VCALL_EXP_EXPLIST(v,name,elst); :}
					| ID:name LPAREN expList:elst RPAREN			  {: RESULT = new AST_VCALL_SIMPLE_EXPLIST(name,elst); :}
					;
				
exp          ::=       var:v                      					  {: RESULT = new AST_EXP_VAR(v);          :}
                       | call:cl                    				  {: RESULT = new AST_EXP_CALL(cl);          :}
                       | exp:e1 binop:op exp:e2            			  {: RESULT = new AST_EXP_BINOP(e1, e2, op); :}
                       | NEW type:t LBRACK exp:e RBRACK    			  {: RESULT = new AST_EXP_TYPE(t, e); :}
                       | NEW CLASS_ID:name LPAREN RPAREN   			  {: RESULT = new AST_EXP_CLASS(name); :}
                       | literal:l   							      {: RESULT = new AST_EXP_LITERAL(l); :}
                       | LPAREN exp:e RPAREN    					  {: RESULT = new AST_EXP_INPAREN(e); :}
                       ;


expList ::= 	exp:e 	{: RESULT = new AST_EXP_LIST(e,null); :}
				|  exp:e COMMA expList:l  {: RESULT= new AST_EXP_LIST(e,l); :}
				|  						{: RESULT= new AST_EXP_LIST(null,null); :}
				;
 
literal     ::=     INT:num                              {: RESULT = new AST_LITERAL_NUM(num); :}
                    | STR:str                            {: RESULT = new AST_LITERAL_STRING(str); :}
                    | NULL                               {: RESULT = new AST_LITERAL_NULL(); :}
                    ;

binop       ::=     MINUS                                {: RESULT = new AST_BINOP_MINUS(); :}
					| PLUS								 {: RESULT = new AST_BINOP_PLUS(); :}
                    | TIMES                                {: RESULT = new AST_BINOP_TIMES(); :}
                    | DIVIDE                                {: RESULT = new AST_BINOP_DIVIDE();:}
                    | LT                                {: RESULT = new AST_BINOP_LT(); :}
                    | LTE                                {: RESULT = new AST_BINOP_LTE(); :}
                    | GT                                {: RESULT = new AST_BINOP_GT(); :}
                    | GTE                                {: RESULT = new AST_BINOP_GTE(); :}
                    | EQUAL                                {: RESULT = new AST_BINOP_EQUAL(); :}
                    | NEQUAL                                {: RESULT = new AST_BINOP_NEQUAL(); :}
                    ;

formals    ::=      type:t ID:name                      {: RESULT = new AST_FORMALS_TYPEID(t, name);:}
                    | type:t ID:name commaTypeIDList:l  {: RESULT = new AST_FORMALS_COMMATYPEID_LIST(name, t, l);:}
                    ;

commaTypeIDList ::= commaTypeID:cmi                     {: RESULT = new AST_COMMATYPEID_LIST(cmi, null);:}
                    | commaTypeID:cmi commaTypeIDList:l  {: RESULT = new AST_COMMATYPEID_LIST(cmi, l);:}
                    ;

commaTypeID     ::= COMMA type:t ID:name                {: RESULT = new AST_COMMATYPEID(t, name);:}
                    ;

field           ::=	type:t idList:l SEMICOLON {: RESULT = new AST_FIELD_IDLIST(t,l); :}
					;
				
idList			::= ID:name					  {: RESULT = new AST_IDLIST(name,null);  :}
					| ID:name COMMA idList:l  {: RESULT= new AST_IDLIST(name,l); :}
					;

method			::= type:t ID:name LPAREN RPAREN LBRACE RBRACE {: RESULT= new AST_METHOD_TYPE_SIMPLE(t,name); :}
					| type:t ID:name LPAREN formals:f RPAREN LBRACE RBRACE {: RESULT= new AST_METHOD_TYPE_FORMALS(t,name,f); :}
					| type:t ID:name LPAREN formals:f RPAREN LBRACE stmtList:l RBRACE {: RESULT = new AST_METHOD_TYPE_FORMALS_STMT(t,name,f,l); :}
					| type:t ID:name LPAREN RPAREN LBRACE stmtList:l RBRACE {: RESULT = new AST_METHOD_TYPE_STMT(t,name,l); :}
					| VOID ID:name LPAREN RPAREN LBRACE RBRACE {: RESULT= new AST_METHOD_VOID_SIMPLE(name); :}
					| VOID ID:name LPAREN formals:f RPAREN LBRACE RBRACE {: RESULT= new AST_METHOD_VOID_FORMALS(name,f); :}
					| VOID ID:name LPAREN formals:f RPAREN LBRACE stmtList:l RBRACE {: RESULT = new AST_METHOD_VOID_FORMALS_STMT(name,f,l); :}
					| VOID ID:name LPAREN RPAREN LBRACE stmtList:l RBRACE {: RESULT = new AST_METHOD_VOID_STMT(name,l); :}
				    ;

				    